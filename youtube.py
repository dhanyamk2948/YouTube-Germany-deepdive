# -*- coding: utf-8 -*-
"""youtube.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/dhanyamk2948/1dc86de2bc8ebc17abe9d84d8caa5c5c/youtube.ipynb

#Analysis of Top 1000 most subscribed YouTube channels in Germany as of 13th Feb 2025

Import Pandas
"""

import pandas as pd
import matplotlib.pyplot as plt

"""Read the csv file containing dataset"""

df = pd.read_csv('/content/top-1000-most-subscribed-youtube-channels-in-germany.csv')

"""Query the top few lines od the data to understand overview"""

df.head()

"""Rowas and columns in the dataset"""

df.shape

"""Get the list of all the columns in the dataset"""

df.columns

"""Basic statistics about the data"""

df.describe()

"""#To find out if old channels have more view or the new ones

sort the started column in ascending order
"""

df1 = df[['Youtuber', 'subscribers', 'video views', 'video count',
       'category', 'started']].sort_values(by='started' ,ascending=True).head(10)

df1['video views'].sum()

df2 = df[['Youtuber', 'subscribers', 'video views', 'video count',
       'category', 'started']].sort_values(by='started' ,ascending=False).head(10)

df2['video views'].sum()

if df1['video views'].sum() > df2['video views'].sum():
  print('Old channels have more views')
else:
  print('New channels have more views')

"""#Category-wise ranking in terms of subscribers, video views and video count

Convert subscribers, video views and video count from string into numbers and since the umber will be too big represent them as millions
"""

df['subscribers'] = df['subscribers'].str.replace(',', '', regex=True).astype(float)
df['Subscribers in Mn'] = df['subscribers'] / 1_000_000
df['video views'] = df['video views'].str.replace(',', '', regex=True).astype(float)
df['Video Views in Mn'] = df['video views'] / 1_000_000
df['Video Count in Mn'] = df['video views'] / 1_000_000
df[['category','Subscribers in Mn']].groupby(by='category').sum().sort_values(by='Subscribers in Mn', ascending=False).head(3)
#print(df[['category','Subscribers in Mn']].groupby(by='category').sum().sort_values(by='Subscribers in Mn', ascending=False).head(3))

"""Conclusion : Entertainment, People and Blogs and Gaming are the most subscribed categories


"""

df[['category','Video Views in Mn']].groupby(by='category').sum().sort_values(by='Video Views in Mn', ascending=False).head(3)

"""Conclusion : Entertainment, Gaming and People and Blogs are the most viewed categories


"""

df[['category','Video Count in Mn']].groupby(by='category').sum().sort_values(by='Video Count in Mn', ascending=False).head(3)

"""Conclusion : Entertainment, Gaming and People and Blogs are the most videos categories"""

import matplotlib.pyplot as plt

# Group by 'category' and sum up
category_subscribers = df.groupby('category')['Subscribers in Mn'].sum().sort_values(ascending=False).head(3)
category_views = df.groupby('category')['Video Views in Mn'].sum().sort_values(ascending=False).head(3)
category_videos = df.groupby('category')['Video Count in Mn'].sum().sort_values(ascending=False).head(3)

# Plot pie chart
plt.figure(figsize=(4, 4))
plt.pie(category_subscribers, labels=category_subscribers.index, autopct='%1.1f%%', startangle=140)
plt.title('Subscribers Distribution by Category')
plt.show()

# Plot pie chart
plt.figure(figsize=(4, 4))
plt.pie(category_views, labels=category_views.index, autopct='%1.1f%%', startangle=140)
plt.title('Video Views Distribution by Category')
plt.show()

# Plot pie chart
plt.figure(figsize=(4, 4))
plt.pie(category_videos, labels=category_videos.index, autopct='%1.1f%%', startangle=140)
plt.title('Video Count Distribution by Category')
plt.show()

"""#Declaring Top Youtuber based on Subscibers, views and video count

Top Youtuber based on Number of Subscribers
"""

df[['Youtuber', 'subscribers', 'category']].sort_values(by='subscribers', ascending=False).head(10)

"""Top Youtuber based on Number of Views"""

df[['Youtuber', 'video views', 'category']].sort_values(by='video views', ascending=False).head(10)

"""Top Youtuber based on Number of videos"""

#df['video count'] = df['video count'].str.replace(',', '', regex=True).astype(int)
df[['Youtuber', 'video count', 'category']].sort_values(by='video count', ascending=False).head(10)

"""Conclusion : In terms of subscribers and video views Tsuriki Show is the top YouTuber of Entertainment category whereas in terms of video count DVB TV News is the top YouTube channel of the category News & Politics."""